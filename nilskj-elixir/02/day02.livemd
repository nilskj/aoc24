# Day 02

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])

```

## Part 1

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "2", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
example = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
```

```elixir
input = puzzle_input |> String.split("\n", trim: true)
  |> Enum.map(fn line -> 
    String.split(line, " ", trim: true) 
    |> Enum.map(&String.to_integer(&1)) 
  end)

input
  |> Enum.map(fn line -> 
    line 
    |> Enum.chunk_every(2, 1, :discard) 
    |> Enum.map(fn [x, y] -> x - y end) 
  end)
  |> Enum.count(fn line -> 
    Enum.all?(line, &(&1 > 0 and &1 < 4)) or Enum.all?(line, &(&1 < 0 and &1 > -4))
    end)

```

## Part 2

```elixir
defmodule DAY02 do
  def is_safe_damp?(report) do
    if is_safe?(report) do
      true
    else
      report
      |> Enum.with_index()
      |> Enum.map(fn {_, index} -> List.delete_at(report, index) end)
      |> Enum.any?(&(is_safe?(&1)))
    end
  end
  
  def is_safe?(report) do
    report_diffs = report
        |> Enum.chunk_every(2, 1, :discard) 
        |> Enum.map(fn [x, y] -> x - y end) 
    
    Enum.all?(report_diffs, &(&1 > 0 and &1 < 4)) or Enum.all?(report_diffs, &(&1 < 0 and &1 > -4))
  end
end

input |> Enum.count(&(DAY02.is_safe_damp?(&1)))

  
```

<!-- livebook:{"offset":1318,"stamp":{"token":"XCP.dQYgIX8sgF7tmllszfxCAXZQwtcpS45jEc5b27dnkknxJSZZv54dKmSeNwmVO9-zB9H7Aj5CmH0fBHHOAzltDpRb4ArucN7bzJuwnRi7hQ1ISjW_zQ4","version":2}} -->
